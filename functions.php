<?php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

/* enqueue script libraries */
function base_enqueue_scripts_styles() {

	$version = time(); // Always bust cache (dev)

	// Sayoshi font
	wp_enqueue_style('satoshi', '//api.fontshare.com/v2/css?f[]=satoshi@300,301,400,401,500,501,700,701&display=swap' , array(), '1.0.1', 'all');


    // Swiper carousel
    wp_enqueue_script('swiper-carousel', get_stylesheet_directory_uri() . '/assets/swiper/swiper-bundle.min.js', array(), '11.0.5', true);
    wp_enqueue_style('swiper-carousel', get_stylesheet_directory_uri() . '/assets/swiper/swiper-bundle.min.css', array(), '11.0.5');


    // Micromodal popups
    wp_enqueue_script('micromodal', get_stylesheet_directory_uri() . '/assets/micromodal/micromodal.min.js', array(), '0.4.10', true);

    // Dynamic mobile menu
    wp_enqueue_script('mmenu-light', get_stylesheet_directory_uri() . '/assets/mmenu/mmenu-light.min.js', array(), '3.2.2', true);
    wp_enqueue_style('mmenu-light', get_stylesheet_directory_uri() . '/assets/mmenu/mmenu-light.css', array(), '3.2.2');

    // Readsmore functionality
    wp_enqueue_script('readsmore', get_stylesheet_directory_uri() . '/assets/readsmore/index.umd.js', array(), '2.5.1', true);

    // Custom theme script
	wp_enqueue_script('theme-script', get_stylesheet_directory_uri() . '/assets/script.js', array(), $version, true);

    // Main stylesheet
    wp_dequeue_style('generate-child');
    wp_enqueue_style('theme-style', get_stylesheet_directory_uri() . '/style.css', array(), '1.0.6');

    // Remove unused scripts
    wp_dequeue_script('generate-offside');
    wp_deregister_script('generate-offside');
    wp_dequeue_script('jquery-migrate');
}
add_action('wp_enqueue_scripts', 'base_enqueue_scripts_styles'); 



//remove autogenerated paragraph tags from cf7
add_filter('wpcf7_autop_or_not', '__return_false');

//remove oembed author from preview links - external sites
function base_remove_oembed_author( $data ) {

    unset($data['author_url']);
    unset($data['author_name']);
    return $data;

}
add_filter( 'oembed_response_data', 'base_remove_oembed_author' );

//preload banner media to improve preconnect LCP
function base_banner_preload_image() {
	
	//standard banner
	$banner_media = get_field('banner_media');

	if($banner_media) {

		$banner_background = $banner_media['background_image'] ?: null;

		if(!empty($banner_background)) {
					
			$image_url = wp_get_attachment_image_url($banner_background, 'full');
			$image_srcset = wp_get_attachment_image_srcset($banner_background, 'full');
			$image_sizes = wp_get_attachment_image_sizes($banner_background, 'full');

			echo '<link rel="preload" as="image" href="' . esc_url($image_url) . '" imagesrcset="' . esc_attr($image_srcset) . '" imagesizes="' . esc_attr($image_sizes) . '">';

		}

	}
	
}
add_action('wp_head', 'base_banner_preload_image', 20);

//global content buttons
function base_get_content_buttons($args = null) {
	
	//buttons classes
	if(!empty($args['class'])) $class = $args['class'];
		
	$buttons = 'element_buttons';
	$buttons_option = null;

	//button prefix for use in certain clone items
	if(!empty($args['prefix'])) $buttons = $args['prefix'] . $buttons;

	if(have_rows($buttons, $buttons_option)) :
				
		$content_buttons_output = '<div class="content-buttons ' . ((isset($class)) ? esc_attr($class) : null) . '">';

		while(have_rows($buttons, $buttons_option)) : the_row();
 
			$button_link = get_sub_field('button_link');
			$button_style = get_sub_field('button_style');

			if(!empty($button_link)) : 

					$content_buttons_output .= '<a class="content-button ' . esc_attr($button_style) . '" href="' . esc_url($button_link['url']) . '" ' . ((str_contains($button_link['url'], 'book-consultation')) ? 'data-micromodal-trigger="book-consultation"' : null) . ' target="' . esc_attr( (($button_link['target']) ? $button_link['target'] : '_self')) . '">'
						. '<span class="button-title">' . $button_link['title'] . '</span>'
						. (($button_link['target'] == '_blank') ? '<span class="screen-reader-text"> (opens in new tab)</span>' : null)
						. ((str_contains($button_style, 'link')) ? '<svg width="24" height="18" viewBox="0 0 24 18" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="0.4375" y="0.95166" width="22.7371" height="16.1089" rx="8.05444" fill="#A8C8D0"/><path d="M8.01123 8.50635C7.73509 8.50635 7.51123 8.73021 7.51123 9.00635C7.51123 9.28249 7.73509 9.50635 8.01123 9.50635L8.01123 8.50635ZM15.9543 9.3599C16.1496 9.16464 16.1496 8.84806 15.9543 8.65279L12.7723 5.47081C12.5771 5.27555 12.2605 5.27555 12.0652 5.47081C11.87 5.66608 11.87 5.98266 12.0652 6.17792L14.8937 9.00635L12.0652 11.8348C11.87 12.03 11.87 12.3466 12.0652 12.5419C12.2605 12.7371 12.5771 12.7371 12.7723 12.5419L15.9543 9.3599ZM8.01123 9.50635L15.6008 9.50635L15.6008 8.50635L8.01123 8.50635L8.01123 9.50635Z" fill="#0C1E21"/></svg>' : null)
						. '</a>';
				
			endif;

		endwhile;

		$content_buttons_output .= '</div>';

	endif;
	
	echo $content_buttons_output ?? null;
	
}

//global page banners  
function base_global_page_banner() {
	
	//standard page banner
	get_template_part( 'elements/page-banner' );
					
}
add_action( 'generate_after_header' , 'base_global_page_banner' , 15 );

//remove page titles but keep on category and blog page
add_filter('generate_show_title', function($show_title) {

	//show title on category and main blog page
	if(is_category() || is_home() || is_search()) {
		return true;
	}
	
	return false;

});

//remove wordpress elements for theme
function base_remove_elements_from_page() {
    
	//remove archive title 
	remove_action('generate_archive_title', 'generate_archive_title', 10);
	
	//remove search results title 
	remove_action('generate_before_loop', 'generate_do_search_results_title', 10);

};
add_action( 'wp', 'base_remove_elements_from_page');

//include page sections
function base_include_theme_elements() {
	
	$page_id = ((is_home() || is_category()) ? get_option('page_for_posts') : null);

	if (have_rows('page_sections', $page_id)) : 

		while (have_rows('page_sections', $page_id)): the_row();

			$layout = str_replace('_', '-', get_row_layout());
			$template_path = locate_template("elements/{$layout}.php");
			
			if ($template_path) {
				include $template_path;
			}

		endwhile;

	endif;
	
	
}
add_action('generate_after_main_content', 'base_include_theme_elements', 20);

//add post classes for article elements
function include_custom_article_classes( $classes ) {

	$post_type = get_post_type();

	if(is_singular('post') && $post_type === 'post')
		$classes[] = 'single-post-article';

	if(is_singular('page') && $post_type === 'page')
		$classes[] = 'single-page-article';

  	return $classes;

}
add_filter('post_class', 'include_custom_article_classes');


//include custom functions for hooks
include_once('includes/function-hooks.php');

//generatepress svg icons 
add_filter( 'generate_svg_icon', function( $output, $icon ) {
	
	if('arrow' === $icon) { 
		$output = '<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="7.44141" cy="7.44141" r="7.44141" fill="#D3D3D3"/><path d="M4.06836 5.69824L7.17584 8.77544L10.3068 5.74401" stroke="#323232" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>';
	}

	if('menu-bars' === $icon) {
		$output = '<svg width="29" height="20" viewBox="0 0 29 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2.16251 8.67596C1.33408 8.67596 0.662506 9.34754 0.662506 10.176C0.662506 11.0044 1.33408 11.676 2.16251 11.676V8.67596ZM26.9541 11.676C27.7826 11.676 28.4541 11.0044 28.4541 10.176C28.4541 9.34754 27.7826 8.67596 26.9541 8.67596V11.676ZM2.16251 0.509277C1.33408 0.509277 0.662506 1.18085 0.662506 2.00928C0.662506 2.8377 1.33408 3.50928 2.16251 3.50928V0.509277ZM18.6897 3.50928C19.5181 3.50928 20.1897 2.8377 20.1897 2.00928C20.1897 1.18085 19.5181 0.509277 18.6897 0.509277V3.50928ZM2.16251 16.8426C1.33408 16.8426 0.662506 17.5142 0.662506 18.3426C0.662506 19.171 1.33408 19.8426 2.16251 19.8426V16.8426ZM18.6897 19.8426C19.5181 19.8426 20.1897 19.171 20.1897 18.3426C20.1897 17.5142 19.5181 16.8426 18.6897 16.8426V19.8426ZM2.16251 11.676H26.9541V8.67596H2.16251V11.676ZM2.16251 3.50928H18.6897V0.509277H2.16251V3.50928ZM2.16251 19.8426H18.6897V16.8426H2.16251V19.8426Z" fill="#ffffffff"/></svg>';
	}
	
    return $output;
	
}, 10, 2 );


//google maps API key for ACF fields
function google_maps_api_key() {
	
	acf_update_setting('google_api_key', 'AIzaSyBMeSqVGj5e8uXs04vDGCBvya6P_fGqBUY');
	
}
add_action('acf/init', 'google_maps_api_key');


//blog filters and results
function blog_filtering_options() {
	
	//prevent adding filters to anywhere else
	if(!is_category() && !is_home())
		return;
	
	//blog filtering
	get_template_part( 'elements/blog-filtering', 'section' );
	
}
add_action('generate_before_main_content', 'blog_filtering_options', 5);

// Contact Info Shortcode
function contact_info_shortcode( $atts = [], $content = '', $tag = '' ) {
	// Ensure ACF is available
	if ( ! function_exists( 'have_rows' ) ) {
		return '';
	}

	if ( ! have_rows( 'contact_information', 'option' ) ) {
		return '';
	}

	$output = '<ul class="contact-info">';

	while ( have_rows( 'contact_information', 'option' ) ) : the_row();
		$link = get_sub_field( 'contact_link' );
		if ( ! $link || ! is_array( $link ) ) {
			continue;
		}

		$url    = isset( $link['url'] ) ? trim( $link['url'] ) : '';
		$title  = isset( $link['title'] ) ? $link['title'] : '';
		$target = isset( $link['target'] ) ? $link['target'] : '';

		if ( ! $url || ! $title ) {
			continue;
		}

		$is_email = false;
		$is_phone = false;
		$href     = $url;

		// Robust detection + normalization
		$lower = strtolower( $url );
		if ( strpos( $lower, 'mailto:' ) !== false ) {
			$is_email = true;
			$href = $url;
		} else if ( strpos( $lower, 'tel:' ) !== false ) {
			$is_phone = true;
			$href = $url;
		} 

		// Icons
		$email_svg = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none"><path d="M28.555 11.1677L16.555 3.16766C16.3907 3.05802 16.1975 2.99951 16 2.99951C15.8025 2.99951 15.6093 3.05802 15.445 3.16766L3.445 11.1677C3.30801 11.2591 3.19572 11.3829 3.11809 11.5281C3.04046 11.6733 2.99989 11.8355 3 12.0002V25.0002C3 25.5306 3.21071 26.0393 3.58579 26.4144C3.96086 26.7894 4.46957 27.0002 5 27.0002H27C27.5304 27.0002 28.0391 26.7894 28.4142 26.4144C28.7893 26.0393 29 25.5306 29 25.0002V12.0002C29.0001 11.8355 28.9595 11.6733 28.8819 11.5281C28.8043 11.3829 28.692 11.2591 28.555 11.1677ZM12.09 19.0002L5 24.0002V13.9414L12.09 19.0002ZM14.1362 20.0002H17.8638L24.9425 25.0002H7.0575L14.1362 20.0002ZM19.91 19.0002L27 13.9414V24.0002L19.91 19.0002Z" fill="#BFA570"/></svg>';
		$phone_svg = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none"><path d="M4.99998 9.99854C4.99736 8.5332 5.52801 7.11675 6.49315 6.01416C7.45622 4.91407 8.78629 4.20047 10.2353 4.00732L10.2363 4.0083C10.4504 3.98217 10.6673 4.02517 10.8545 4.13232C11.0414 4.2394 11.1886 4.40448 11.2744 4.60205V4.60303L11.2803 4.61377L13.832 10.311V10.3218L13.915 10.5112C13.9807 10.6628 14.008 10.8291 13.9941 10.9937C13.9802 11.1581 13.925 11.3163 13.8349 11.4546L11.2353 14.5366L10.8144 15.0366L11.1025 15.6226C12.1382 17.7271 14.2916 19.8594 16.416 20.894L17.0039 21.1802L17.5019 20.7573L20.539 18.1714L20.54 18.1724L20.541 18.1714L20.5449 18.1685C20.6832 18.0762 20.8423 18.0197 21.0078 18.0044C21.1709 17.9893 21.3353 18.0144 21.4863 18.0776L21.4931 18.0815L27.3828 20.7202L27.3887 20.7231L27.3955 20.7261C27.5937 20.8115 27.7586 20.9589 27.8662 21.146C27.9727 21.3314 28.0165 21.546 27.9922 21.7583C27.8003 23.2097 27.0879 24.5419 25.9863 25.5063C24.8837 26.4716 23.4673 27.0031 22.0019 27.0005H22C12.6274 27.0005 5.00012 19.3731 4.99998 10.0005V9.99854Z" stroke="#BFA570" stroke-width="2"/></svg>';

		$icon = '';
		if ( $is_email ) {
			$icon = $email_svg;
		} elseif ( $is_phone ) {
			$icon = $phone_svg;
		}

		$target_attr = $target ? ' target="' . esc_attr( $target ) . '"' : '';
		$rel_attr    = ( '_blank' === $target ) ? ' rel="noopener noreferrer"' : '';

		$output .= '<li class="contact-info__item">'
			. '<a class="contact-info__link" href="' . esc_url( $href ) . '"' . $target_attr . $rel_attr . '>'
				. $icon
				. '<span class="contact-info__text">' . esc_html( $title ) . '</span>'
			. '</a>'
			. '</li>';
	endwhile;

	$output .= '</ul>';

	return $output;
}
add_shortcode( 'contact-info', 'contact_info_shortcode' );

function property_filter_shortcode() {
    ob_start();
    get_template_part('elements/partials/property-filter');
    return ob_get_clean();
}
add_shortcode('property_filter', 'property_filter_shortcode');

add_action('pre_get_posts', function($query) {
    if (!is_admin() && $query->is_main_query()) {

        // Force homepage to only show properties
        if ($query->is_home()) {
            $query->set('post_type', 'property'); // your CPT slug
            $query->set('posts_per_page', 9);     // adjust as needed
        }

        // Apply filters on archive and homepage
        if ($query->is_post_type_archive('property') || $query->is_home()) {

            $meta_query = [];

            // Locations (taxonomy)
            if (!empty($_GET['locations'])) {
                $query->set('tax_query', [[
                    'taxonomy' => 'locations',
                    'field'    => 'slug',
                    'terms'    => sanitize_text_field($_GET['locations'])
                ]]);
            }

            // Bedrooms
            if (!empty($_GET['bedrooms'])) {
                $meta_query[] = [
                    'key'     => 'bedrooms',
                    'value'   => (int) $_GET['bedrooms'],
                    'compare' => '='
                ];
            }

            // Reference Number
            if (!empty($_GET['reference_number'])) {
                $meta_query[] = [
                    'key'   => 'reference_number',
                    'value' => sanitize_text_field($_GET['reference_number']),
                ];
            }

            // Min Price
            if (!empty($_GET['price_min'])) {
                $meta_query[] = [
                    'key'     => 'for_sale_price',
                    'value'   => (int) $_GET['price_min'],
                    'compare' => '>=',
                    'type'    => 'NUMERIC'
                ];
            }

            // Max Price
            if (!empty($_GET['price_max'])) {
                $meta_query[] = [
                    'key'     => 'for_sale_price',
                    'value'   => (int) $_GET['price_max'],
                    'compare' => '<=',
                    'type'    => 'NUMERIC'
                ];
            }

            if (!empty($meta_query)) {
                $query->set('meta_query', $meta_query);
            }
        }
    }
});



